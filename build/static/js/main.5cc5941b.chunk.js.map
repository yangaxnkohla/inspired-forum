{"version":3,"sources":["service/history.js","routes/Route.js","components/Login/Login.js","components/Home/Home.js","routes/index.js","components/App/App.js","service/serviceWorker.js","index.js"],"names":["history","createBrowserHistory","RouteWrapper","Component","component","isPrivate","rest","to","defaultProps","Login","props","handleSubmit","bind","event","preventDefault","data","FormData","target","fetch","method","body","className","onSubmit","this","id","name","placeholder","required","autoFocus","type","href","React","Home","Routes","path","exact","Register","Feed","SearchResults","Post","Profile","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4XAIeA,EAFCC,c,QCED,SAASC,EAAT,GAIX,IAHSC,EAGV,EAHDC,UACAC,EAEC,EAFDA,UACGC,EACF,yCAOD,OAAID,EACK,kBAAC,IAAD,CAAUE,GAAG,MAcf,kBAAC,IAAD,iBAAWD,EAAX,CAAiBF,UAAWD,KAQrCD,EAAaM,aAAe,CAC1BH,WAAW,G,wCCQEI,G,8DAvCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,yDAKNC,GACXA,EAAMC,iBACN,IAAMC,EAAO,IAAIC,SAASH,EAAMI,QAOhCC,MAAM,QAAS,CACbC,OAAQ,OACRC,KAAML,M,+BAKR,OACE,yBAAKM,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMC,SAAUC,KAAKZ,cACnB,2BAAOa,GAAG,WAAWC,KAAK,WAAWC,YAAY,WAAWL,UAAU,eAAeM,UAAQ,EAACC,WAAS,IAAG,6BAC1G,2BAAOJ,GAAG,WAAWC,KAAK,WAAWC,YAAY,WAAWL,UAAU,eAAeM,UAAQ,IAAG,6BAChG,4BAAQH,GAAG,SAASK,KAAK,SAASR,UAAU,oCAA5C,WAGJ,yBAAKG,GAAG,kBACN,uBAAGA,GAAG,UAAUM,KAAK,KAArB,WACA,uBAAGN,GAAG,kBAAkBM,KAAK,KAA7B,0B,GAjCUC,IAAM5B,Y,iBCcX6B,G,wDAbb,WAAYtB,GAAQ,uCACZA,G,qDAIN,OACE,yBAAKW,UAAU,QACX,gD,GARSU,IAAM5B,Y,oECMV,SAAS8B,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAAC/B,UAAWK,IACjC,kBAAC,EAAD,CAAOyB,KAAK,YAAY9B,UAAWgC,MACnC,kBAAC,EAAD,CAAOF,KAAK,QAAQ9B,UAAW4B,IAC/B,kBAAC,EAAD,CAAOE,KAAK,QAAQ9B,UAAWiC,IAAMhC,WAAS,IAC9C,kBAAC,EAAD,CAAO6B,KAAK,WAAW9B,UAAWkC,IAAejC,WAAS,IAC1D,kBAAC,EAAD,CAAO6B,KAAK,QAAQ9B,UAAWmC,IAAMlC,WAAS,IAC9C,kBAAC,EAAD,CAAO6B,KAAK,WAAW9B,UAAWoC,IAASnC,WAAS,IAEpD,kBAAC,EAAD,CAAOD,UAAWK,KCVTgC,MARf,WACE,OACE,kBAAC,IAAD,CAAQzC,QAASA,GACf,kBAACiC,EAAD,QCGcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5cc5941b.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = false;\n\n  /**\n   * Redirect user to Login page if he tries to access a private route\n   * without authentication.\n   */\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (Login or Register) after being authenticated.\n   */\n  if (!isPrivate && signed) {\n    return <Redirect to=\"/home\" />;\n  }  \n\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n  return <Route {...rest} component={Component} />;\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\n\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};\n","import React from 'react';\n\nimport history from '../../service/history';\n\nimport './Login.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const data = new FormData(event.target);\n\n    // history.push({\n    //   pathname: '/home',\n    //   data: data // your data array of objects\n    // });\n\n    fetch('/home', {\n      method: 'POST',\n      body: data,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Login\">\n        <div className=\"Login-details\">\n          <form onSubmit={this.handleSubmit}>\n            <input id=\"username\" name=\"username\" placeholder=\"Username\" className=\"form-control\" required autoFocus /><br />\n            <input id=\"password\" name=\"password\" placeholder=\"Password\" className=\"form-control\" required /><br />\n            <button id=\"submit\" type=\"submit\" className=\"btn btn-lg btn-primary btn-block\">Login</button>\n          </form>\n        </div>\n        <div id=\"Login-register\">\n          <a id=\"sign-up\" href=\"#\">Sign Up</a>\n          <a id=\"forgot-password\" href=\"#\">Forgot password?</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from 'react';\n\nimport history from '../../service/history';\n\nimport './Home.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n          <h1>Hello World</h1>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\n\nimport Route from \"./Route\";\n\nimport Login from \".././components/Login/Login\";\nimport Register from \".././components/Register/Register\";\nimport Home from \".././components/Home/Home\";\nimport Feed from \".././components/Feed/Feed\";\nimport SearchResults from \".././components/SearchResults/SearchResults\";\nimport Post from \".././components/Post/Post\";\nimport Profile from \".././components/Profile/Profile\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={Login} />\n      <Route path=\"/register\" component={Register} />\n      <Route path=\"/home\" component={Home}  />\n      <Route path=\"/feed\" component={Feed} isPrivate />\n      <Route path=\"/results\" component={SearchResults} isPrivate />\n      <Route path=\"/post\" component={Post} isPrivate />\n      <Route path=\"/profile\" component={Profile} isPrivate />\n      {/* redirect user to SignIn page if route does not exist and user is not authenticated */}\n      <Route component={Login} />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport { Router } from 'react-router-dom';\n\nimport history from './../../service/history';\nimport Routes from './../../routes/index';\n\nfunction App() {\n  return (\n    <Router history={history}>\n      <Routes />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './service/serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}